{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WTHIT Documentation","text":"<p>Welcome to WTHIT documentation!</p>"},{"location":"config/blacklisting/","title":"Blacklisting Blocks and Entities","text":""},{"location":"config/blacklisting/#using-blacklist-file","title":"Using Blacklist File","text":"<p>To blacklist object from WTHIT, edit <code>.minecraft/config/waila/blacklist.json</code> file.</p>"},{"location":"config/blacklisting/#using-tags","title":"Using Tags","text":"<p>Datapack tags can also be used to blacklist objects. To blacklist some blocks from WTHIT, create a block tag called <code>waila:blacklist</code>. See an entry about datapack tags on Minecraft Wiki here.</p> <p>For example, to make stone block blacklisted you make the tag contains the following</p> <code>data/waila/tags/blocks/blacklist.json</code> <pre><code>{\n  \"values\": [\n    \"minecraft:stone\"\n  ]\n}\n</code></pre> <p>The same can be done for entity types</p> <code>data/waila/tags/entity_types/blacklist.json</code> <pre><code>{\n  \"values\": [\n    \"minecraft:pig\"\n  ]\n}\n</code></pre>"},{"location":"javadoc/legal/jquery/","title":"Jquery","text":""},{"location":"javadoc/legal/jquery/#jquery-v361","title":"jQuery v3.6.1","text":""},{"location":"javadoc/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.6.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n******************************************\n\nThe jQuery JavaScript Library v3.6.1 also includes Sizzle.js\n\nSizzle.js includes the following license:\n\nCopyright JS Foundation and other contributors, https://js.foundation/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/sizzle\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n*********************\n</code></pre>"},{"location":"javadoc/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"javadoc/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"javadoc/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n</code></pre>"},{"location":"plugin/adding_to_blacklist/","title":"Adding to Blacklist","text":"<p>Unlike overriding object to disable the tooltip, adding it  to the blacklist means the player can override those values.</p> <p>You can add blocks, block entity types, and entity types to the blacklist.</p> <pre><code>public class MyWailaPlugin implements IWailaPlugin {\n  @Override\n  public void register(IRegistrar registrar) {\n      registrar.addBlacklist(\n        Blocks.OAK_PLANKS,\n        Blocks.CRAFTING_TABLE\n      );\n\n      registrar.addBlacklist(\n        EntityType.MINECART\n      );\n  }\n}\n</code></pre>"},{"location":"plugin/adding_to_blacklist/#using-tag-to-add-to-blacklist","title":"Using tag to add to blacklist","text":"<p>This method only viable if your mod also adds new blocks and/or entities since this would require the tag to be present on the server. Create a tag called <code>waila:blacklist</code>.</p> <p>For example, to make stone block blacklisted you make the tag contains the following</p> <code>data/waila/tags/blocks/blacklist.json</code> <pre><code>{\n  \"values\": [\n    \"minecraft:stone\"\n  ]\n}\n</code></pre> <p>The same can be done for entity types</p> <code>data/waila/tags/entity_types/blacklist.json</code> <pre><code>{\n  \"values\": [\n    \"minecraft:pig\"\n  ]\n}\n</code></pre>"},{"location":"plugin/config/","title":"Plugin Configuration","text":"<p>Not everyone wanted every feature from your plugin, so making them configurable is recommended.</p>"},{"location":"plugin/config/#config-types","title":"Config Types","text":"<p><code>IRegistrar</code> has multiple methods for registering a config option:</p>"},{"location":"plugin/config/#addconfig","title":"<code>addConfig</code>","text":"<p>This method registers a local-only option. This is recommended for cosmetic-only options.</p>"},{"location":"plugin/config/#addsyncedconfig","title":"<code>addSyncedConfig</code>","text":"<p>This method registers a server option. The server will force connected clients to have the same value.  If the client is connected to a server that doesn't have WTHIT, its value will be locked to the specified client-only value.</p>"},{"location":"plugin/config/#addmergedconfig","title":"<code>addMergedConfig</code>","text":"<p>Like <code>addSyncedConfig</code>, the server will send its option value to connected clients but it won't force the value. When the server enabled the option, the client can freely disable it for their side. Recommended for toggle for a feature that works client-only.</p>"},{"location":"plugin/config/#addmergedsyncedconfig","title":"<code>addMergedSyncedConfig</code>","text":"<p>This is pretty much the same as <code>addMergedConfig</code> but with the additional rule that the server needs to have WTHIT installed,  otherwise, the option will be locked to a predetermined value. Recommended for toggle for a feature that needs server-synced data to work properly.</p>"},{"location":"plugin/config/#translation-keys","title":"Translation Keys","text":"<p>These translation keys will be used on the plugin config screen:</p> <ul> <li><code>config.waila.plugin_[namespace].[path]</code> for the config name.</li> <li><code>config.waila.plugin_[namespace].[path]_desc</code> for the config description.   This one is optional and can be left missing.</li> </ul> <p>Config options can also be grouped with the same prefix on its path followed by a period [<code>.</code>], e.g. <code>my_plugin:group.option1</code> and <code>my_plugin:group.option2</code>.</p> <p>Then, add a translation for <code>config.waila.plugin_[namespace].[group]</code> with the group name for it to be visible in the config screen.</p>"},{"location":"plugin/disabling_tooltip/","title":"Disabling Tooltip","text":""},{"location":"plugin/disabling_tooltip/#disabling-tooltip-for-certain-objects","title":"Disabling Tooltip for Certain Objects","text":"<p>Sometimes you want to disable the tooltip for showing altogether. To do that, WTHIT contains a static variable on <code>I*ComponentProvider</code> that we can use as a return value for <code>getOverride</code>.</p> <pre><code>public class BlockOverride implements IBlockComponentProvider {\n  @Override\n  public BlockState getOverride(IBlockAccessor accessor, IPluginConfig config) {\n    return EMPTY_BLOCK_STATE;\n  }\n}\n</code></pre> <pre><code>public class EntityOverride implements IEntityComponentProvider {\n  @Override\n  public Entity getOverride(IEntityAccessor accessor, IPluginConfig config) {\n    return EMPTY_ENTITY;\n  }\n}\n</code></pre>"},{"location":"plugin/getting_started/","title":"Getting Started","text":""},{"location":"plugin/getting_started/#gradle-setup","title":"Gradle Setup","text":"<p>To get started making a WTHIT plugin, add the following to your <code>build.gradle</code></p>"},{"location":"plugin/getting_started/#adding-repository","title":"Adding Repository","text":"<pre><code>repositories {\n  maven {\n    url \"https://maven2.bai.lol\"\n    content {\n      includeGroup \"lol.bai\"\n      includeGroup \"mcp.mobius.waila\"\n    }\n  }\n}\n</code></pre>"},{"location":"plugin/getting_started/#declaring-dependencies","title":"Declaring Dependencies","text":"<p>Mod versions can be found on Modrinth: WTHIT, Bad Packets</p> FabricForgeNeoForgeQuiltArchitecturyVanillaGradle Multiplatform <pre><code>dependencies {\n  // compile against the API\n  modCompileOnly \"mcp.mobius.waila:wthit-api:fabric-${wthitVersion}\"\n\n  // run against the full jar\n  modRuntimeOnly \"mcp.mobius.waila:wthit:fabric-${wthitVersion}\"\n  modRuntimeOnly \"lol.bai:badpackets:fabric-${badpacketsVersion}\"\n}\n</code></pre> <pre><code>buildscript {\n  dependencies {\n    classpath \"org.spongepowered:mixingradle:0.7.+\"\n  }\n}\n\napply plugin: \"org.spongepowered.mixin\"\n\ndependencies {\n  // compile against the API\n  compileOnly fg.deobf(\"mcp.mobius.waila:wthit-api:forge-${wthitVersion}\")\n\n  // run against the full jar\n  runtimeOnly fg.deobf(\"mcp.mobius.waila:wthit:forge-${wthitVersion}\")\n  runtimeOnly fg.deobf(\"lol.bai:badpackets:forge-${badpacketsVersion}\")\n}\n</code></pre> <pre><code>dependencies {\n  // compile against the API\n  compileOnly \"mcp.mobius.waila:wthit-api:neo-${wthitVersion}\"\n\n  // run against the full jar\n  runtimeOnly \"mcp.mobius.waila:wthit:neo-${wthitVersion}\"\n  runtimeOnly \"lol.bai:badpackets:neo-${badpacketsVersion}\"\n}\n</code></pre> <pre><code>dependencies {\n  // compile against the API\n  modCompileOnly \"mcp.mobius.waila:wthit-api:quilt-${wthitVersion}\"\n\n  // run against the full jar\n  modRuntimeOnly \"mcp.mobius.waila:wthit:quilt-${wthitVersion}\"\n  modRuntimeOnly \"lol.bai:badpackets:fabric-${badpacketsVersion}\"\n}\n</code></pre> <p>Common Project<pre><code>dependencies {\n  modCompileOnly \"mcp.mobius.waila:wthit-api:fabric-${wthitVersion}\"\n}\n</code></pre> Fabric Project<pre><code>dependencies {\n  modRuntimeOnly \"mcp.mobius.waila:wthit:fabric-${wthitVersion}\"\n  modRuntimeOnly \"lol.bai:badpackets:fabric-${badpacketsVersion}\"\n}\n</code></pre> Forge Project<pre><code>dependencies {\n  modRuntimeOnly \"mcp.mobius.waila:wthit:forge-${wthitVersion}\"\n  modRuntimeOnly \"lol.bai:badpackets:forge-${badpacketsVersion}\"\n}\n</code></pre> Quilt Project<pre><code>dependencies {\n  modRuntimeOnly \"mcp.mobius.waila:wthit:quilt-${wthitVersion}\"\n  modRuntimeOnly \"lol.bai:badpackets:fabric-${badpacketsVersion}\"\n}\n</code></pre></p> <p>Common Project<pre><code>dependencies {\n  compileOnly \"mcp.mobius.waila:wthit-api:mojmap-${wthitVersion}\"\n}\n</code></pre> Fabric Project<pre><code>dependencies {\n  modRuntimeOnly \"mcp.mobius.waila:wthit:fabric-${wthitVersion}\"\n  modRuntimeOnly \"lol.bai:badpackets:fabric-${badpacketsVersion}\"\n}\n</code></pre> Forge Project<pre><code>buildscript {\n  dependencies {\n    classpath \"org.spongepowered:mixingradle:0.7.+\"\n  }\n}\n\napply plugin: \"org.spongepowered.mixin\"\n\ndependencies {\n  runtimeOnly fg.deobf(\"mcp.mobius.waila:wthit:forge-${wthitVersion}\")\n  runtimeOnly fg.deobf(\"lol.bai:badpackets:forge-${badpacketsVersion}\")\n}\n</code></pre> NeoForge Project<pre><code>dependencies {\n  runtimeOnly \"mcp.mobius.waila:wthit:neo-${wthitVersion}\"\n  runtimeOnly \"lol.bai:badpackets:neo-${badpacketsVersion}\"\n}\n</code></pre> Quilt Project<pre><code>dependencies {\n  modRuntimeOnly \"mcp.mobius.waila:wthit:quilt-${wthitVersion}\"\n  modRuntimeOnly \"lol.bai:badpackets:fabric-${badpacketsVersion}\"\n}\n</code></pre></p> Why compiling against the API jar? <p>When you compile against the full jar and use non API classes, your mod could break any time WTHIT updates.  On the other hand, the API jar is guaranteed to be stable. No breaking changes without deprecation time.</p> <p>If you found yourself needing to touch non API classes, open an issue on GitHub.</p> Available packages <p>All packages has <code>mcp.mobius.waila</code> as their group.</p> Package Description <code>wthit-api:fabric-${version}</code> Intermediary API jar for Loom projects <code>wthit-api:forge-${version}</code> SRG API jar for ForgeGradle projects <code>wthit-api:neo-${version}</code> Mojang Mappings API jar for NeoGradle projects <code>wthit-api:quilt-${version}</code> Intermediary API jar for Quilt-Loom projects <code>wthit-api:mojmap-${version}</code> Mojang Mappings API jar for VanillaGradle projects <code>wthit:fabric-${version}</code> Full runtime jar for Fabric <code>wthit:forge-${version}</code> Full runtime jar for Forge <code>wthit:neo-${version}</code> Full runtime jar for NeoForge <code>wthit:quilt-${version}</code> Full runtime jar for Quilt <code>wthit:mojmap-${version}</code> Full platform independent jar for internal implementation access"},{"location":"plugin/getting_started/#creating-plugins","title":"Creating Plugins","text":""},{"location":"plugin/getting_started/#making-a-plugin-class","title":"Making a Plugin Class","text":"<p>Make a class that implements <code>IWailaPlugin</code> <pre><code>public class MyWailaPlugin implements IWailaPlugin {\n  @Override\n  public void register(IRegistrar registrar) {\n      // register your component here\n  }\n}\n</code></pre></p>"},{"location":"plugin/getting_started/#registering-plugins","title":"Registering Plugins","text":"<p>Create a file called <code>waila_plugins.json</code> or <code>wthit_plugins.json</code> in the root of your mod, commonly in <code>src/main/resources</code> folder on your project. <pre><code>{\n  // the plugin identifier, [namespace:path]\n  \"yourmodid:plugin\": {\n    // the path to the implementation class\n    \"initializer\": \"package.YourWailaPlugin\",\n\n    // optional, decide the environment the plugin will loaded, options:\n    // client    load plugin only on client and integrated server\n    // server    load plugin only on dedicated server\n    // *         load plugin on both client and dedicated server\n    \"side\": \"*\",\n\n    // optional, the required mods that this plugin needs\n    \"required\": [\"othermodid\", \"anotherone\"]\n  },\n\n  // register multiple plugins!\n  \"yourmodid:another\": { /*...*/ }\n}\n</code></pre></p>"},{"location":"plugin/overrides/","title":"Overrides","text":"<p>If you have special blocks that shows itself as another block (example: facades), you would want that block to show the imitated block on WTHIT as well.  To do that, you need to register a block override provider.</p>"},{"location":"plugin/overrides/#block-override","title":"Block Override","text":"<p>In this example we wanted to show powder snow block as regular snow block.</p> <p>First create a class that implements <code>IBlockComponentProvider</code> and override the <code>getOverride</code> method. In there you return the block state that you want to immitate into.</p> YarnMojang <pre><code>public class BlockOverride implements IBlockComponentProvider {\n  @Override\n  public BlockState getOverride(IBlockAccessor accessor, IPluginConfig config) {\n    return Blocks.SNOW_BLOCK.getDefaultState();\n  }\n}\n</code></pre> <pre><code>public class BlockOverride implements IBlockComponentProvider {\n  @Override\n  public BlockState getOverride(IBlockAccessor accessor, IPluginConfig config) {\n    return Blocks.SNOW_BLOCK.defaultBlockState();\n  }\n}\n</code></pre> <p>Then you register the class on your main plugin class. <pre><code>public class MyWailaPlugin implements IWailaPlugin {\n  @Override\n  public void register(IRegistrar registrar) {\n      registrar.addOverride(new BlockOverride(), PowderSnowBlock.class);\n  }\n}\n</code></pre></p> Priority <p>WTHIT will choose the first override with lower priority number. <code>a &lt;= b ? a : b</code></p>"},{"location":"plugin/overrides/#entity-override","title":"Entity Override","text":"<p>It's also applicable for entities, simply make a class implementing <code>IEntityComponentProvider</code> <pre><code>public class EntityOverride implements IEntityComponentProvider {\n  @Override\n  public Entity getOverride(IEntityAccessor accessor, IPluginConfig config) {\n    return EntityType.SHEEP.create(accessor.getWorld());\n  }\n}\n</code></pre></p> <pre><code>public class MyWailaPlugin implements IWailaPlugin {\n  @Override\n  public void register(IRegistrar registrar) {\n      registrar.addOverride(new EntityOverride(), PigEntity.class);\n  }\n}\n</code></pre> Caching <p>Unlike <code>BlockState</code>, an <code>Entity</code> instance is not cached on any way. This can possibly cause performance issue if you have a many overrides. To mimimalize this, you need to cache it yourself. Since <code>*ComponentProvider</code> is a client-only class, caching based on world and/or position should  be enough for most cases.</p>"},{"location":"plugin/server_data/","title":"Syncing Server Data","text":"Danger <p>This section uses Mojang Mappings.</p> <p>By default, <code>I*ComponentProvider</code> can only access client data. To access server data, you need to sync the data from the server. To do that, WTHIT provides an <code>IDataProvider</code> interface.</p> <p><code>IDataProvider</code> provides a way to sync server data via either an NBT object for simple data, or specific <code>IData</code> object.</p>"},{"location":"plugin/server_data/#simple-nbt-data","title":"Simple NBT Data","text":"<p>Using NBT data is pretty straightforward, in your <code>IDataProvider</code> implementation call <code>IDataWriter#raw</code> and modify the returned NBT object. <pre><code>public class SimpleDataProvider implements IDataProvider&lt;MyBlockEntity&gt; {\n    @Override\n    public void appendData(IDataWriter data, IServerAccessor&lt;MyBlockEntity&gt; accessor, IPluginConfig config) {\n        data.raw().putInt(\"someInt\", accessor.getTarget().getSomeInt());\n    }\n}\n</code></pre></p> <p>Then in your <code>I*ComponentProvider</code> implementation, call <code>IDataReader#raw</code> to get the synced data <pre><code>public class SimpleComponentProvider implements IBlockComponentProvider {\n    @Override\n    public void appendBody(ITooltip tooltip, IBlockAccessor accessor, IPluginConfig config) {\n        CompoundTag data = accessor.getData().raw();\n        if (data.contains(\"someInt\")) {\n            int someInt = data.getInt(\"someInt\");\n        }\n    }\n}\n</code></pre></p> Data Key <p>Use a uniqe key to identify your data as it may conflict with data from other mod's provider.</p>"},{"location":"plugin/server_data/#complex-data-type","title":"Complex Data Type","text":"<p><code>IData</code> interface allows synced data to have type safety when modifying/accessing it. It also allows implementations to decide how the data is structured directly in the packet byte buffer.</p>"},{"location":"plugin/server_data/#built-in-data-types","title":"Built-in Data Types","text":"<p>WTHIT contains built-in data types that can be used to attach informations in a standarized way. The built-in data types that WTHIT provides are <code>EnergyData</code>, <code>FluidData</code>, <code>ItemData</code>, and  <code>ProgressData</code>.</p>"},{"location":"plugin/server_data/#energydata","title":"<code>EnergyData</code>","text":"<p><code>EnergyData</code> provides information regarding target object's energy storage. By default, it supports  the modding platform standard APIs:</p> <ul> <li>Forge <code>IEnergyStorage</code> Capability</li> <li>Team Reborn Energy</li> </ul> <p><code>EnergyData#describe</code> can be used to customize how the energy data is shown in the client.</p>"},{"location":"plugin/server_data/#fluiddata","title":"<code>FluidData</code>","text":"<p><code>FluidData</code> provides information regarding target object's fluid storage. By default, it supports the modding platform standard APIs:</p> <ul> <li>Forge <code>IFluidHandler</code> Capability</li> <li>Fabric Transfer API</li> </ul> <p><code>FluidData#describeFluid</code> can be used to customize how the fluid is shown in the client, but if you already used the standard API it should already work out of the box.</p> <p><code>FluidData#describeCauldron</code> can be used if you have a custom blockstate-based cauldron for your fluids. Not needed on Fabric as Fabric API's <code>CauldronFluidContent</code> already provides this  functionality.</p>"},{"location":"plugin/server_data/#itemdata","title":"<code>ItemData</code>","text":"<p><code>ItemData</code> provides information regarding target object's item storage. By default, it supports the modding platform standard APIs:</p> <ul> <li>Forge <code>IItemHandler</code> Capability</li> <li>Fabric Transfer API</li> <li>Vanilla <code>Container</code></li> </ul>"},{"location":"plugin/server_data/#progressdata","title":"<code>ProgressData</code>","text":"<p><code>ProgressData</code> provides information regarding target object's crafting progress status. This is the only data type that needs explicit implementation for the target object.</p> Disabling built-in data for your object <p>You can use the block methods from the section below to block the data, or you can use datapack  tags to do so:</p> Data Type Tag ID <code>EnergyData</code> <code>waila:extra/energy_blacklist</code> <code>FluidData</code> <code>waila:extra/fluid_blacklist</code> <code>ItemData</code> <code>waila:extra/item_blacklist</code> <code>ProgressData</code> <code>waila:extra/progress_blacklist</code> <p>The tags is available for blocks, block entity types, and entity types.</p>"},{"location":"plugin/server_data/#attaching-complex-data","title":"Attaching Complex Data","text":"<p>First check if your objects already show some data and if the data are correct. To attach the data call <code>IDataWriter#add</code> with the type that you want to attach. <pre><code>public class ComplexDataProvider implements IDataProvider&lt;MyBlockEntity&gt; {\n    @Override\n    public void appendData(IDataWriter data, IServerAccessor&lt;MyBlockEntity&gt; accessor, IPluginConfig config) {\n        data.add(EnergyData.class, res -&gt; {\n            MyBlockEntity be = accessor.getTarget();\n            res.add(EnergyData.of(be.getStoredEnergy(), be.getEnergyCapacity()));\n        });\n    }\n}\n</code></pre></p> <p><code>IDataWriter.Result#block</code> can be used to block the data from being synced to the client.  WTHIT also provides the <code>IDataWriter#blockAll</code> method and <code>BlockingDataProvider</code> class that can be used to block all data unconditionally.</p>"},{"location":"plugin/server_data/#creating-custom-data-type","title":"Creating Custom Data Type","text":"<p>First, create an object that implements the <code>IData</code> interface. You also need to create a  constructor that accepts a buffer for the client side. <pre><code>public class StringData implements IData {\n    private final String value;\n\n    public StringData(String value) {\n        this.value = value;\n    }\n\n    public StringData(FriendlyByteBuf buf) {\n        this(buf.readUtf());\n    }\n\n    @Override\n    public void write(FriendlyByteBuf buf) {\n        buf.writeUtf(value);\n    }\n}\n</code></pre></p> <p>Then, register the data type in your main plugin class. <pre><code>public class MyWailaPlugin implements IWailaPlugin {\n    @Override\n    public void register(IRegistrar registrar) {\n        registrar.addDataType(new ResourceLocation(\"mymod:str\"), \n                StringData.class, StringData::new);\n    }\n}\n</code></pre></p>"},{"location":"plugin/server_data/#getting-complex-data-on-client","title":"Getting Complex Data on Client","text":"Warning <p>Note that built-in data types are not designed to be retreived by other mods on the client,  they simply for attaching data on the server.</p> <p>Getting complex data is actually simpler as you don't have to deal with string key. To get the data on the client, simply call <code>IDataReader#get</code> with the type of data that you want.</p> <pre><code>public class SimpleComponentProvider implements IBlockComponentProvider {\n    @Override\n    public void appendBody(ITooltip tooltip, IBlockAccessor accessor, IPluginConfig config) {\n        StringData data = accessor.getData().get(StringData.class);\n        if (data != null) {\n            // do something with data\n        }\n    }\n}\n</code></pre>"}]}