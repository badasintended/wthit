plugins {
    id "com.matthewprenger.cursegradle" version "1.3.0"
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def versionEnv = System.getenv("MOD_VERSION")
if (versionEnv == null || versionEnv.isBlank()) {
    versionEnv = "local"
}

group = package_group
archivesBaseName = mod_name
version = "${versionEnv}+${mc_version}"

minecraft {
    refmapName = mod_name.toLowerCase() + '-refmap.json'
}

repositories {
	maven { url "https://maven.terraformersmc.com/releases" }
}

dependencies {
    compile "com.google.code.findbugs:jsr305:3.0.2"

    minecraft "com.mojang:minecraft:${mc_version}"
    mappings "net.fabricmc:yarn:${mc_version}+build.${mappings_version}:v2"

    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${api_version}"

    modImplementation "io.github.prospector:modmenu:${modmenu_version}"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'mcp/mobius/waila/api/**/*'
    exclude 'mcp/mobius/waila/api/impl/**/*'
    archiveClassifier.set('api')
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact(jar) {
                    builtBy remapJar
                }
                artifact(remapJar) {
                    builtBy remapJar
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
            }
        }
    }
}

def curseRelations = {
    requiredLibrary 'fabric-api'
}

curseforge {
    if (project.hasProperty('curse_key_TehNut'))
        apiKey = project.curse_key_TehNut

    project {
        id = "${curse_id}"
        changelog = getChangelogText()
        releaseType = 'release'

        relations curseRelations

        addGameVersion "1.16"
        addGameVersion "Java 8"
        addArtifact sourcesJar
        addArtifact apiJar
        mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

String getChangelogText() {
    def changelogFile = new File('changelog.txt')
    String str = ''
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {
                return
            }
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    return str
}